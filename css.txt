có 3 nơi đặt css
_ css inline: nội tuyến <tag style="css">
_ css internal : nội bộ <style> css </style>
_ css external : bên ngoài <link href ="style.css">

css inline: cách viết mã ngay bên trong html
selector: thuộc tính: giá trị

internal (css nội bộ): cách viết mã css trong cặp thẻ style (đặt trong khối head)
search vscode emmet inline new line
a * 3

css external: trường hợp muốn áp dụng cho toàn bộ file html nằm trong trang wweb
tránh phải copy css ra tất cả các file 
link:css
<link ref ="stylesheet" href="style.css">
nhấn ctrl + click vào style.css sẽ tự động tạo file

*) độ ưu tiên: inline> internal và external
internal và external: ở trên thẻ head, cái nào viết sau sẽ tái định nghĩa (ghi đè) lại cái viết trước

*) thuộc tính css

vào file -> preferences -> keyboard shortcuts => gõ line com 
_ opacity: quy định độ trong suốt
0.0 -> 1.0
0% -> 100%
làm trong suốt phần tử bao gồm cả nền 
vẫn chiếm vị trí trên giao diện nếu opacity = 0, vẫn tương tác được
_ display: none: ẩn phần tử khỏi giao diện, xóa cả không gian nó đang chiếm, không thể tương tác
_ visibility: ẩn hoặc hiện element
giống với opacity: ko nhìn thấy vẫn chiếm ko gian, nhưng ko tương tác được
_ ẩn cả cha, ẩn cả con
_ chỉ có visibility có tính thừa kế (inspect chọn thẻ h2 -> có chữ inherited from h2) 
_ riêng display none không hỗ trợ animation (xem ở w3s)

*) tình huống sử dụng opacity, display, visibility


*) favicon: gõ link:favicon: đường link dẫn đến favicon
logo thương hiệu trang web
search với từ khóa: make favicon online

*) css prefix: css có nhiều thuộc tính và không phải thuộc tính nào cũng hỗ trợ tất cả trình duyệt
tìm vendor prefix css
cài thêm tiện ích live preview
chuột phải vào file html => chọn show preview (không phải F1 tìm file server preview)
search gg =>  autoprefix css => 
sử dụng caniuse.com để biết thuộc tính nào cần prefix
dấu -: hỗ trợ với prefix
đỏ: ko hỗ trợ
*) tagname, id và class
id: duy nhất
tìm từ khóa validator html

*) bộ chọn kết hợp: combinator selector
(*selector và element.class)
*selector : chọn tất cả các element

element.class: p.intro => chọn tất cả các thẻ p có class là intro

_  bộ chọn kết hợp 2:
element, element
div, p: chọn tất cả các thẻ div và p (mỗi bộ chọn cách nhau bởi dấu phẩy)
.class1.class2: tác động lên thẻ có đủ 2 class này (giống điều kiện and)

_  bộ chọn kết hợp 3
Space selector
div p: chọn tất cả các thẻ p nằm trong thẻ div
> selector: div > p: chọn tất cả các thẻ p là con trực tiếp của thẻ div (thụt 1 cấp)
(thụt 2 cấp sẽ không phải con trực tiếp)
(khác nhau giữa thẻ con và thẻ con trực tiếp (dấu space và dấu >))

_  bộ chọn kết hợp 4
+ selectors
element + element
div + p: chọn phần tử p đầu tiên được đặt ngay sau phần tử div
h1 + h2: tác động thẻ h2 đặt ngay sau nó
.demo2 + h3: thẻ h3 nằm sát ngay sau class demo2

_ bộ chọn kết hợp 5
dấu ~
div ~ a: tất cả thẻ a nằm sau thẻ div
(không quan tâm có sát đít hay không)

*) AttributeSelector
[href]: chọn tất cả các thẻ có thuộc tính là href
a[href]: chỉ tác động thẻ a có thuộc tính là href

[Attribute=value]
a[target="_blank"]: chỉ tác động vào thẻ a có target = blank

[Attribute~=value]
[title~="pic"]: chọn tất cả các thuộc tính title có chứa từ pic trong giá trị (pic phải đứng riêng lẻ)
a[title~="pic"][title~="so"]: chỉ tác động đến thẻ a có title chứa từ pic và so

[attribute*=value]
[title*="pic"]: chọn tất cả các thuộc tính: title có chứa chuỗi pic trong giá trị
a[title*="pic"]: chỉ tác động thẻ a: chỉ cần có chuỗi pic trong giá trị

[attribute|=value]
[title |= "pic"]: chọn tất cả thuộc tính có từ duy nhất bắt đầu bằng từ pic
a[title|="pic"]: chỉ tác động thẻ a: Title bắt đầu bằng từ pic, nếu có nhiều thì phải nối nhau = dấu -

[attribute^=value]
[title|^"pic"]: chọn tất cả các thuộc tính: title bắt đầu bằng từ pic
a[title^="pic"]: chỉ tác động đến thẻ a: Title bắt đầu bằng từ pic, có thể có nhiều từ  đằng sau

[attribute$=value]:
[title$="1"]: chọn tất cả các thuộc tính title kết thúc bằng kí tự 1 
a[title$="1"]: chỉ tác động thẻ a: Title kết thúc bằng kí tự "1"

*) pse udo classes
_ :hover
p:hover: chọn thẻ p khi di chuột qua
_ :active
a:active: Chọn thẻ a khi nhấn giữ chuột
_ :link, :visited
a:link : chọn thẻ a có liên kết chưa click vào
a:visited: chọn thẻ a có liên kết đã click truy cập
_ :empty
div:empty: chọn các thẻ div không có nội dung
tác động lên các thẻ div không có nội dung
_ :target
#home:target: Chọn thẻ có id = "home" khi trên url có hash tương ứng
khi  click vào thẻ a có id là nó
ví dụ click vào a có #thanbai thì thanbai sẽ thành màu được set
_ Child selectors (không quan tâm đến kiểu)
p:first-child: thẻ p là thẻ con đầu tiên
p:last-child: thẻ p là thẻ con cuối cùng
p:nth-child(2): thẻ p là thẻ con thứ 2 từ trên xuống
p:nth-last-child(2): thẻ p là thẻ con thứ 2 từ  dưới lên
p:only-child: thẻ p là thẻ con duy nhất (nếu có 1 thẻ khác ví dụ h1 thì vẫn ko phải là thẻ con duy nhất)

_ Type selectors (quan tâm đến kiểu)
p:first-of-type: thẻ p xuất hiện đầu tiên trong thẻ cha
p:last-of-type: thẻ p xuất hiện cuối cùng trong thẻ cha
p:nth-of-type(2): thẻ p xuất hiện thứ n trong thẻ cha
p:nth-last-of-type(2): thẻ p xuất hiện thứ n trong thẻ cha, tính từ cuối lên
p:only-of-type: thẻ p xuất hiện duy nhất trong thẻ cha

_ Not selectors và quy tắc thứ tự ưu tiên
:not(selector)
.top:not(p): Chọn các thẻ có class top ngoại trừ thẻ p
.top:not(:first-of-type)
1. !important
2. inline style
3. id selector
4. class hoặc pseudo class (:) selector
5. element selector (h, p, li, div)
6. Bộ chọn chung (*)

Thứ tự ưu tiên
search từ khóa css specificity => w3school

*) css box
box model: Trình duyệt luôn coi mỗi phần tử là 1 box - hộp chữ nhật
Nội dung (width, height) => hình ảnh, text, video
padding => khoảng đệm nội dung và viền (không chứa nội dung)
border => viền của phần tử (viên nét liền, đứt,..)
margin => khoảng cách với các phần từ liền kề

chiều cao, chiều rộng của 1 phần từ = content + padding + border (không bao gồm margin)
chrome extension: pesticide for chrome
_ Padding
(dấu - trong computed của inspect chrome là chưa đc định nghĩa)
trên dưới, trái phải: 2 đối số
trên trái,phải dưới : 3 đối số
trên phải dưới trái: 4 đối số (đi theo chiều kim đồng hồ)
(nếu có nhiều thuộc tính giống nhau thì thuộc tính đứng sau sẽ đè lên)

_ Border: viền
border:  <line-width> || <line-style> || <color>
border-radius

_ Margin: khoảng cách của nó với phần tử ở bên cạnh nó
trong TH có phần tử liền kề
	
_ sử dụng margin âm để xếp chồng avatar
vào uifaces.co để lấy avatar

_ margin collapse: là hiện tượng chồng lặp thuộc tính margin khi 2 phần tử liền kề cùng thiết lập margin với phần tử còn lại theo chiều dọc
 còn theo chiều ngang không bị hiện tượng này
 mặc định display: block sẽ chiếm hết theo chiều ngang
để tránh trường hợp margin collapse ta chỉ dàn trang theo 1 chiều nhất quán
TH2: xảy ra khi sử dụng quan hệ cha con

_outline: là đường viền bao quanh mép ngoài cùng của đối tượng
+ Không làm tăng thêm kích thước phần tử
+ Đơn giản nó chỉ là 1 vùng bao ngoài, chiếm cả vào phần margin
(từ border hất ra (không có border tính từ padding, không có padding thì tính từ content), có thể đè lên margin)
giống như lớp áo bên ngoài cùng
+ không vẽ được theo nhiều chiều
+ có thuộc tính outline-offset:cách viền border ra 1 khoảng và không quan tâm đến margin

_ box-sizing: content-box và border-box
sử dụng border-box thường xuyên hơn để kích thước khớp với thiết kế, tránh phải tính toán lại phần nội dung
(kích thước phần tử ổn định)

*) Default CSS Value
tìm kiếm default css value
Ngôn ngữ đọc từ trái qua phải : start = left, end = right
còn gặp ngôn ngữ ả rập thì sẽ tính start = right, end = left
vd: margin-block-start

*) Inheritance-Kế thừa: các phần tử con nhận được giá trị thuộc tính thừa kề từ phần tử cha
 các thuộc tính kế thừa chủ yếu liên quan đến văn bản 
 font-family, font-size, font-weight, font-style, color, text-align, line-height, letter-spacing,... 
tìm kiếm thuộc tính có được kế thừa hay không: css (color) property , w3s

*) Reset CSS
tìm kiếm browser default style
Các Trình duyệt khác nhau sẽ tự động thêm thuộc tính khác nhau => khó kiểm soát
search reset css
lưu ý: reset.css luôn đặt trên cùng

*) CSS Layout-Display
display: block, inline, inline-block.
Mặc định có 2 trạng thái display mặc định: block,inline
+ block: các thẻ ở trạng thái mặc định luôn chiếm 100% chiều rộng của thẻ cha bất kể
 nội dung dài hay ngắn: ví dụ div, p, h1, h2, ul, ol
 search html block inline element
 
+inline : hộp có kích thước phụ thuộc vào nội dung bên trong nó
ví dụ: a, strong, em, button
không phá vỡ cấu trúc dòng, các phần tử inline có thể đặt cạnh nhau
1 số thuộc tính không áp dụng được với inline 
 1. padding-top, padding-bottom
 2. margin-top, margin-bottom
 3. width, height, min-width, min-height
 sở dĩ không áp dụng được vì sinh ra để nằm trên cùng 1 hàng, tránh phá vỡ cấu trúc dòng
 
 + inline-block: là sự kết hợp giữa inline và block
 
 *) Đơn vị css
 search từ khóa css unit
 _ px: Đơn vị tuyệt đối
Đơn vị để đo kích thước 1 hình ảnh kĩ thuật số
  _ %: Đơn vị tương đối
 12%: kích thước = 12% phần tử cha của nó
 nếu thẻ cha không có thì sẽ lấy kích thước mặc định của trình duyệt
 thẻ body là 1 thẻ co giãn, chỉ cao bằng kích thước phần tử khai báo bên trong
 
 _ vw, vh: đơn vị tương đối
 50vw: 50% chiều rộng khung hình(viewport: phần hiển thị trên browser)
  20vh: 20% chiều cao khung hình(viewport: phần hiển thị trên browser)
 _ em
  2em: kích thước gấp 2 lần còn lại (có kế thừa)
  TH1: thẻ cha và thẻ con ko có font size=> lấy font-size của root(html)
  TH2: thẻ cha có fontSize => thẻ con kế thừa
  TH3: thẻ cha và con đều có fontSize => ưu tiên chính nó hơn (thằng con)
  TH4: thẻ cha có fontSize tương đối
  thẻ cha sẽ lấy kích thước mặc định từ trình duyệt (16px) 
  =>  thẻ cha: fontSize 2 * 16 = 32px, thẻ con kế thừa
_ rem: kích thước phụ thuộc vào font-size của html (root element)
3rem: kích thước gấp 3 lần font chữ root element (không kế thừa) 
chuyển đổi 1 rem = 10px
can thiệp vào thẻ gốc html
vì mặc định 100% = 16px thì 1 rem = 16px
sinh ra khái niệm (10*100/16)% = 62.5%  để 1 rem = 10px

*) làm việc với màu sắc trong CSS
_ rgb: red green blue  từ 00 đến ff
_ rgba a từ 0.1 đến 1
_ hệ thập lục phân #rrggbb
_ tên màu

*) CSSFont
_ Font không có gai ở đầu chữ cái: sans serif
_ Font có gai ở đầu: serif
_ Font có cùng độ rộng: Monospace
gỡ từ tìm kiếm: system fonts stack
Nhúng font: đồng nhất khi các hđh khác nhau

*) Typography trong CSS
Kiểu chữ trong CSS
search css reference
_ font-weight: độ dày của chũ (thường từ 100 đến 900)
_ line-height: chiều cao dòng
_ letter spacing: tăng giảm khoảng cách giữa các kí tự
_ word spacing: tăng giảm khoảng cách giữa các từ
_ text-align: justify (căn dàn đều 2 bên), left, right, center
text-align chỉ căn text so với box chứa nó
_ text-docoration: none, underline, line-through, overline, underline dotted blue 5px
_ text-indent: thụt lề
_ text-transform: capitalize (viết hoa chữ cái đầu), lowercase, uppercase
_ white-space: quy định về khoảng trắng khi code
   normal(mặc định), nowrap (không xuống dòng kể cả chạm tới lề), pre: giữ nguyện định dạng code
   _ word break: bẻ ngang từ để giữ giao diện không bị vỡ
   sử dụng break-all
_ text-shadow: Bóng đổ text
vào trang https://cssgenerator.org/text-shadow-css-generator.html
   text-shadow: ngang, dọc, blur, màu 
   Đối số 1: trực nằm ngang, từ trái qua phải
   Đối số 2: trục thẳng đứng, từ trên xuống dưới
   Đối số 3: độ nhòe: cao nhất là 0
   Đối số 4: màu sắc 
_ over-flow: visible
   visible(mặc định): hiển thị nội dung kể cả vượt box chứa 
  hidden: ẩn nội dung: khi nội dung vượt box chứa 
   scroll: tạo thanh cuộn: luôn hiển thị vùng thanh cuộn 
   auto: nếu nội dung ngắn => không có scrollbar 
   nếu nội dung vượt box chứa => tự động sinh ra scrollbar 

_ overscroll-behavior: auto;
Mặc định khi lăn chuột vào phần tử trong, lăn xuống hết nội dung, 
rồi nhấn lăn chuột tiếp sẽ lăn chuột vào phần tử ngoài
Để tránh trường hợp này ta dùng thuộc tính 
overscroll-behavior: contain
thuộc tính overscroll-behavior: none nếu trên pc sẽ giống như contain nhưng trên mobile sẽ khác

_ text-overflow: để dấu ...
tạo dấu .. ở dòng thứ 2, tương tự dòng 3, 4
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  display: -webkit-box;
*) tạo biểu tượng đẹp với font awesome  
tìm kiếm awesome font cdn

*) background
_ background-color: 
   nền sẽ chỉ đổ từ border hất vào trong ( chỉ đổ vào phần tính vào kích thước phần tử) 

_ background-image
+ background-repeat
tìm kiếm textture background image, chọn công cụ chọn màu: trong suốt, kích thước: biểu tượng
_ có thể sử dụng kết hợp: ảnh nào xếp trước nằm trước, xếp sau nằm sau

+ background_size: điều chỉnh kích thước ảnh nền
   contain: ảnh vừa khung hình, giữ nguyên tỉ lệ ảnh, không bị mất ảnh, tuy nhiên phần thừa ra sẽ lặp lại 
   cover: ảnh vừa khớp khung hình, giữ nguyên tỉ lệ ảnh (ko bị méo), có thể mất 1 phần hình ảnh, không lặp lại 
   200px 200px: chiều rộng, chiều cao
   100% 100%:    chiếm 100% chiều rộng box chứa nó, chiếm 100% chiều cao box chứa nó
   
+ background-position
top left, top right,....

+ linear-gradient: giải nền chuyển sắc
search linear gradient

_ background-attachment
mặc định scroll: ảnh tự động cuộn theo trình duyệt khi kéo lên, xuống
fixed: ảnh cố định khi kéo scroll lên xuống
local: ảnh cố định cục bộ trong bố cục con

_ background-clip: quy định vùng đổ nền
border-box: default: ảnh sẽ đổ vào full kích thước phần tử: content + padding + border 
padding-box: ảnh chỉ đổ từ padding vào 
content-box: ảnh chỉ đổ phần content
text: đổi màu nền phần text

_ background-origin: xác định gốc của bức ảnh đặt ở vị trí nào
_ shorthand: cú pháp viết tắt
_ backdrop-filter: bộ lọc phông nền

*) clip path
quy ước: gốc ảnh nằm ở góc trái trên cùng
circle: chỉ định bán kính đường tròn sẽ cắt
inset: hình chữ nhật
polygon: cắt hình đa giác

*) box shadow
search box_shadow
*) pointer-event: kiểm soát hoạt động của chuột trên các phần tử html

*)lazy load :  sử dụng để tối ưu trang web khi nội dung dài, việc load toàn bộ ảnh khi truy cập là không cần thiết */
 => chỉ tải ảnh khi người dùng cuộn đến nội dung ảnh
 thêm thuộc tính loading=lazy
 
 *) pseudo elements: phần tử giả 
 khác với psedo classes: lớp giả có dấu :
 phần từ giả có dấu ::
 ::first-line: dòng đầu tiên
 ::first-letter: chữ cái đầu tiên
 ::marker: tác động lên thẻ li (dấu .)
 ::selection: tác động lên vùng bôi đen
 ::before: thêm phần tử vào đằng trước
 ::after: thêm phần tử vào đằng sau
 
 *) CSS counters
 counter-reset: section: khai báo biến: section
 counter-increment: section: tăng biến đếm section
 đặt vào trước thẻ : content: counter (section)
 
 *) calc
  là 1 hàm trong CSS cho phép thực hiện các phép tính đơn giản 
 có thể sử dụng với tất cả các thuộc tính CSS về kích thước như width, height, margin, padding, top, left, background-position,... 
 
 *) css variable: biến trong css
  Khi 1 giá trị css dùng đi dùng lại nhiều lần, ta có thể gán biến cho nó để tái sử dụng
  *) css position
  position: relative
  position: absolute
  position: fixed
  z-index
  sticky: bôi đen Ctrl Shift L phím tắt chọn nhiều phần tử giống nhau
  hoặc ctrl D chọn từng phần tử giống nhau
  
  *) PageLayout, Component Layout
  Layout
  Flexbox
  FlexContainer
  Justify-content
  align-items
  flex-wrap
  align-content
  flex-direction
  flex-flow
  
  Flex Item
  Align Self
  Flex Grow
  Flex Shrink
  Flex Basis
  Flex: cú pháp viết tắt






   