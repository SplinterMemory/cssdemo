có 3 nơi đặt css
_ css inline: nội tuyến <tag style="css">
_ css internal : nội bộ <style> css </style>
_ css external : bên ngoài <link href ="style.css">

css inline: cách viết mã ngay bên trong html
selector: thuộc tính: giá trị

internal (css nội bộ): cách viết mã css trong cặp thẻ style (đặt trong khối head)
search vscode emmet inline new line
a * 3

css external: trường hợp muốn áp dụng cho toàn bộ file html nằm trong trang wweb
tránh phải copy css ra tất cả các file 
link:css
<link ref ="stylesheet" href="style.css">
nhấn ctrl + click vào style.css sẽ tự động tạo file

*) độ ưu tiên: inline> internal và external
internal và external: ở trên thẻ head, cái nào viết sau sẽ tái định nghĩa (ghi đè) lại cái viết trước

*) thuộc tính css

vào file -> preferences -> keyboard shortcuts => gõ line com 
_ opacity: quy định độ trong suốt
0.0 -> 1.0
0% -> 100%
làm trong suốt phần tử bao gồm cả nền 
vẫn chiếm vị trí trên giao diện nếu opacity = 0, vẫn tương tác được
_ display: none: ẩn phần tử khỏi giao diện, xóa cả không gian nó đang chiếm, không thể tương tác
_ visibility: ẩn hoặc hiện element
giống với opacity: ko nhìn thấy vẫn chiếm ko gian, nhưng ko tương tác được
_ ẩn cả cha, ẩn cả con
_ chỉ có visibility có tính thừa kế (inspect chọn thẻ h2 -> có chữ inherited from h2) 
_ riêng display none không hỗ trợ animation (xem ở w3s)

*) tình huống sử dụng opacity, display, visibility


*) favicon: gõ link:favicon: đường link dẫn đến favicon
logo thương hiệu trang web
search với từ khóa: make favicon online

*) css prefix: css có nhiều thuộc tính và không phải thuộc tính nào cũng hỗ trợ tất cả trình duyệt
tìm vendor prefix css
cài thêm tiện ích live preview
chuột phải vào file html => chọn show preview (không phải F1 tìm file server preview)
search gg =>  autoprefix css => 
sử dụng caniuse.com để biết thuộc tính nào cần prefix
dấu -: hỗ trợ với prefix
đỏ: ko hỗ trợ
*) tagname, id và class
id: duy nhất
tìm từ khóa validator html

*) bộ chọn kết hợp: combinator selector
(*selector và element.class)
*selector : chọn tất cả các element

element.class: p.intro => chọn tất cả các thẻ p có class là intro

_  bộ chọn kết hợp 2:
element, element
div, p: chọn tất cả các thẻ div và p (mỗi bộ chọn cách nhau bởi dấu phẩy)
.class1.class2: tác động lên thẻ có đủ 2 class này (giống điều kiện and)

_  bộ chọn kết hợp 3
Space selector
div p: chọn tất cả các thẻ p nằm trong thẻ div
> selector: div > p: chọn tất cả các thẻ p là con trực tiếp của thẻ div (thụt 1 cấp)
(thụt 2 cấp sẽ không phải con trực tiếp)
(khác nhau giữa thẻ con và thẻ con trực tiếp (dấu space và dấu >))

_  bộ chọn kết hợp 4
+ selectors
element + element
div + p: chọn phần tử p đầu tiên được đặt ngay sau phần tử div
h1 + h2: tác động thẻ h2 đặt ngay sau nó
.demo2 + h3: thẻ h3 nằm sát ngay sau class demo2

_ bộ chọn kết hợp 5
dấu ~
div ~ a: tất cả thẻ a nằm sau thẻ div
(không quan tâm có sát đít hay không)

*) AttributeSelector
[href]: chọn tất cả các thẻ có thuộc tính là href
a[href]: chỉ tác động thẻ a có thuộc tính là href

[Attribute=value]
a[target="_blank"]: chỉ tác động vào thẻ a có target = blank

[Attribute~=value]
[title~="pic"]: chọn tất cả các thuộc tính title có chứa từ pic trong giá trị (pic phải đứng riêng lẻ)
a[title~="pic"][title~="so"]: chỉ tác động đến thẻ a có title chứa từ pic và so

[attribute*=value]
[title*="pic"]: chọn tất cả các thuộc tính: title có chứa chuỗi pic trong giá trị
a[title*="pic"]: chỉ tác động thẻ a: chỉ cần có chuỗi pic trong giá trị

[attribute|=value]
[title |= "pic"]: chọn tất cả thuộc tính có từ duy nhất bắt đầu bằng từ pic
a[title|="pic"]: chỉ tác động thẻ a: Title bắt đầu bằng từ pic, nếu có nhiều thì phải nối nhau = dấu -

[attribute^=value]
[title|^"pic"]: chọn tất cả các thuộc tính: title bắt đầu bằng từ pic
a[title^="pic"]: chỉ tác động đến thẻ a: Title bắt đầu bằng từ pic, có thể có nhiều từ  đằng sau

[attribute$=value]:
[title$="1"]: chọn tất cả các thuộc tính title kết thúc bằng kí tự 1 
a[title$="1"]: chỉ tác động thẻ a: Title kết thúc bằng kí tự "1"

*) pse udo classes
_ :hover
p:hover: chọn thẻ p khi di chuột qua
_ :active
a:active: Chọn thẻ a khi nhấn giữ chuột
_ :link, :visited
a:link : chọn thẻ a có liên kết chưa click vào
a:visited: chọn thẻ a có liên kết đã click truy cập
_ :empty
div:empty: chọn các thẻ div không có nội dung
tác động lên các thẻ div không có nội dung
_ :target
#home:target: Chọn thẻ có id = "home" khi trên url có hash tương ứng
khi  click vào thẻ a có id là nó
ví dụ click vào a có #thanbai thì thanbai sẽ thành màu được set
_ Child selectors (không quan tâm đến kiểu)
p:first-child: thẻ p là thẻ con đầu tiên
p:last-child: thẻ p là thẻ con cuối cùng
p:nth-child(2): thẻ p là thẻ con thứ 2 từ trên xuống
p:nth-last-child(2): thẻ p là thẻ con thứ 2 từ  dưới lên
p:only-child: thẻ p là thẻ con duy nhất (nếu có 1 thẻ khác ví dụ h1 thì vẫn ko phải là thẻ con duy nhất)

_ Type selectors (quan tâm đến kiểu)
p:first-of-type: thẻ p xuất hiện đầu tiên trong thẻ cha
p:last-of-type: thẻ p xuất hiện cuối cùng trong thẻ cha
p:nth-of-type(2): thẻ p xuất hiện thứ n trong thẻ cha
p:nth-last-of-type(2): thẻ p xuất hiện thứ n trong thẻ cha, tính từ cuối lên
p:only-of-type: thẻ p xuất hiện duy nhất trong thẻ cha

_ Not selectors và quy tắc thứ tự ưu tiên
:not(selector)
.top:not(p): Chọn các thẻ có class top ngoại trừ thẻ p
.top:not(:first-of-type)
1. !important
2. inline style
3. id selector
4. class hoặc pseudo class (:) selector
5. element selector (h, p, li, div)
6. Bộ chọn chung (*)

Thứ tự ưu tiên


